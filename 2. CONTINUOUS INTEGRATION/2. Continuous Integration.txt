# 2. Continuous Integration
---------------------------

* Continuous Integration
------------------------
Integration that is happening continuously

		**** VERY IMPORTANT FOR THE PROJECT ****

		Continuous Integration										Non-Continuous Integration
		----------------------										--------------------------
		. Merge frequently										. Merge everything at once

		. QA when code is ready (This requires to have automated tests)					. QA makes all the changes at once

		. Developer driven										. Schedule and deadline driven


* Levels of testing
-------------------
. Syntax textign and linting

. Unit and integration testing

		**** VERY IMPORTANT FOR THE PROJECT ****

		Unit testing focuses in individual units of code, for example, testing a function with various valid and invalid arguments, and comparing that to the expecting output.

		Integration tests, are tests that focus on a larger scope. (Does this feature works as expected, does the API call return the expected output?).

		
. Acceptance testing (very similar to integration testing but running in an environment as similar to the real environment as possible, and simulating real user interaction).


* Pipelines
-----------
The tests should happen in a pipeline. This allows to find errors in seconds of submitting the merge requests, insted of waiting several minutes, for your entire set of tests to run.

		**** VERY IMPORTANT FOR THE PROJECT ****

		Your tests should fail early and often

		YOU NEED TO PUT TIME AND EFFORT INTO COMPREHENSIVE TESTS


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating a pipeline
---------------------
# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Bash.gitlab-ci.yml

# See https://docs.gitlab.com/ee/ci/yaml/index.html for all available options

# you can delete this line if you're not using Docker
image: busybox:latest

before_script:
  - echo "Before script section"
  - echo "For example you might run an update here or install a build dependency"
  - echo "Or perhaps you might print out some debugging details"

after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

build1:
  stage: build
  script:
    - echo "Do your build here"

test1:
  stage: test
  script:
    - echo "Do a test here"
    - echo "For example run a test suite"

test2:
  stage: test
  script:
    - echo "Do another parallel test here"
    - echo "For example run a lint test"

deploy1:
  stage: deploy
  script:
    - echo "Do your deploy here"
  environment: production


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Running your pipeline
-----------------------

* build
-------
Running with gitlab-runner 17.0.0~pre.88.g761ae5dd (761ae5dd)
  on green-3.saas-linux-small-amd64.runners-manager.gitlab.com/default Jhc_Jxvh, system ID: s_0e6850b2bce1
Preparing the "docker+machine" executor
00:06
Using Docker executor with image busybox:latest ...
Pulling docker image busybox:latest ...
Using docker image sha256:65ad0d468eb1c558bf7f4e64e790f586e9eda649ee9f130cd0e835b292bbc5ac for busybox:latest with digest busybox@sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7 ...
Preparing environment
00:00
Running on runner-jhcjxvh-project-59534037-concurrent-0 via runner-jhcjxvh-s-l-s-amd64-1720044737-70d712cb...
Getting source from Git repository
00:02
Fetching changes with git depth set to 20...
Initialized empty Git repository in /builds/rrtech/gitlab-cicd/.git/
Created fresh repository.
Checking out c78d9778 as detached HEAD (ref is main)...
Skipping Git submodules setup
$ git remote set-url origin "${CI_REPOSITORY_URL}"
Executing "step_script" stage of the job script
00:00
Using docker image sha256:65ad0d468eb1c558bf7f4e64e790f586e9eda649ee9f130cd0e835b292bbc5ac for busybox:latest with digest busybox@sha256:9ae97d36d26566ff84e8893c64a6dc4fe8ca6d1144bf5b87b2b85a32def253c7 ...
$ echo "Before script section"
Before script section
$ echo "For example you might run an update here or install a build dependency"
For example you might run an update here or install a build dependency
$ echo "Or perhaps you might print out some debugging details"
Or perhaps you might print out some debugging details
$ echo "Do your build here"
Do your build here
Running after_script
00:01
Running after script...
$ echo "After script section"
After script section
$ echo "For example you might do some cleanup here"
For example you might do some cleanup here
Cleaning up project directory and file based variables
00:00
Job succeeded


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Going deeper with pipelines
-----------------------------































